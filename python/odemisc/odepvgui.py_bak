#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Created     : 3/27/21 7:06 PM
# Author      : nchen
# File        : gui_dialog.py
# Description :

import sys
import os
import json
import getpass
from PySide2.QtWidgets import (QLineEdit, QPushButton, QApplication, QGroupBox, QComboBox, QCheckBox,
                               QDialog, QGridLayout, QVBoxLayout, QHBoxLayout, QPlainTextEdit, QLabel, QFormLayout,
                               QWidget,
                               QRadioButton, QButtonGroup, QMainWindow)
from PySide2.QtCore import Qt,Slot


class Pvgui(QWidget):
    def __init__(self, pvSource, pvDest,lay_lib_name,lay_cell_name,lay_view_name,title_raw="PV", parent=None):
        super(Pvgui, self).__init__(parent)

        self.__mainLayout = QVBoxLayout()
        self.__mainRunWidges = {}

        # define tools widget
        self.__pvTools = ["calibre", "pvs", "icv"]
        self.__pvToolsDefault = "calibre"
        self.__pvToolsNotReady = ["pvs", "icv"]
        self.__createPvToolTypes(self.__pvTools)
        self.__mainLayout.addWidget(self.__pvToolsTypesGroup)
        # end of define tools widget

        self.__inputData = Inputdata(lay_lib_name,lay_cell_name,lay_view_name,self)
        self.__mainLayout.addWidget(self.__inputData)
        self.__pvCellName = self.__inputData.getCellName()

        # define pv check types
        self.__pvSourceWidthToosl = f"{pvSource}/{self.__pvToolsDefault}"
        self.__pvCheckTypes = next(os.walk(self.__pvSourceWidthToosl))[1]
        self.__createPvCheckTypes(self.__pvCheckTypes)
        self.__mainLayout.addWidget(self.__pvCheckTypesGroup)
        # end of define pv check types

        # gui generated by pv check types
        for pvCheckType in self.__pvCheckTypesWidget:
            pvSourceSingle = f"{self.__pvSourceWidthToosl}/{pvCheckType}"
            print(pvCheckType)
            if os.path.exists(f"{pvSourceSingle}/drc"):
                self.__mainRunWidges[pvCheckType]=(PVdrc(pvSourceSingle, pvCheckType, pvDest, self.__inputData))
            #                self.__mainRunWidges[-1].setContentsMargins(0,0,0,0)
#            if os.path.exists(f"{pvSourceSingle}/lvs"):
#                self.__mainRunWidges[pvCheckType]=(PVlvs(pvSourceSingle, pvCheckType, pvDest, self.__pvCellName))
#            if os.path.exists(f"{pvSourceSingle}/xrc"):
#                self.__mainRunWidges[pvCheckType]=(PVxrc(pvSourceSingle, pvCheckType, pvDest, self.__pvCellName))
#            if os.path.exists(f"{pvSourceSingle}/perc"):
#                self.__mainRunWidges[pvCheckType]=( PVperc(pvSourceSingle, pvCheckType, pvDest, self.__pvCellName))

        print(111111111111111111111)
        # dynamic adjust check types
        self.updateCheckWidget()
        # end of dynamic adjust check types
        print(self.__inputData.getCellName())
        print(222222222222222222222)

        # set default pv tool
        for toolWidget in self.__pvToolsTypesWidget:
            if toolWidget.text() == self.__pvToolsDefault:
                toolWidget.setChecked(True)
            if toolWidget.text() in self.__pvToolsNotReady:
                # toolWidget.setCheckable(False)
                toolWidget.setEnabled(False)
        # end of set default pv tool

        self.setLayout(self.__mainLayout)
        title = f"{title_raw} UI(official account:edanote github:edanote)"
        self.setWindowTitle(title)
        self.show()

    def __createPvToolTypes(self, tools):
        self.__pvToolsTypesGroup = QGroupBox("select tools")
        self.__pvToolsTypesWidget = []
        self.__pvToolsTypesLayout = QHBoxLayout(self)
        for tool in tools:
            self.__pvToolsTypesWidget.append(QRadioButton(tool, self))
            self.__pvToolsTypesLayout.addWidget(self.__pvToolsTypesWidget[-1])
        self.__pvToolsTypesLayout.setContentsMargins(0, 0, 0, 0)
        self.__pvToolsTypesGroup.setLayout(self.__pvToolsTypesLayout)

    def __createPvCheckTypes(self, pvCheckTypes):
        self.__pvCheckTypesGroup = QGroupBox("select check types")
        self.__pvCheckTypesWidget = {}
        self.__pvCheckTypesLayout = QHBoxLayout()
        for pvCheckType in pvCheckTypes:
            self.__pvCheckTypesWidget[pvCheckType]=(QCheckBox(pvCheckType, self))
            self.__pvCheckTypesLayout.addWidget(self.__pvCheckTypesWidget[pvCheckType])
            self.__pvCheckTypesWidget[pvCheckType].stateChanged.connect(self.updateCheckWidget)
        #            self.__pvCheckTypesLayout.addWidget(self.__pvCheckTypesWidget[-1])
        self.__pvCheckTypesLayout.setContentsMargins(0, 0, 0, 0)
        self.__pvCheckTypesGroup.setLayout(self.__pvCheckTypesLayout)

    def updateCheckWidget(self):
        for checkType in self.__mainRunWidges:
            if self.__pvCheckTypesWidget[checkType].isChecked():
                self.__mainRunWidges[checkType].setVisible(True)
                self.__mainLayout.addWidget(self.__mainRunWidges[checkType])
            else:
                self.__mainRunWidges[checkType].setVisible(False)
            self.__mainRunWidges[checkType].updatePvResultPath(self.__inputData.getCellName())
        self.resize(self.size().width(), self.minimumSizeHint().height())

    def getRuleDeckPath(self):
        print(self.__pvCheckTypesWidget[checkType].ruleDeckPath())


class InputdataOne(QWidget):
    global gui
    def __init__(self, sch_or_lay,lib_name,cell_name,view_name,main_window,parent=None):
        super(InputdataOne, self).__init__(parent)
        #        self.layLibNameTxt = QLabel("layout library name")
        self.__updateCheckWidget = main_window.updateCheckWidget()
        self.__layLibName = QLineEdit(lib_name)
        self.__layCellName = QLineEdit(cell_name)
        self.__layCellName.textChanged.connect(self.updateResultDir)
        self.__layViewName = QLineEdit(view_name)
        self.__selectLayout = QPushButton(f"get {sch_or_lay}", self)
        self.__selectLayout.setMinimumSize(110, 0)

        self.__inputDataLayout = QHBoxLayout()
        self.__inputDataLayout.addWidget(self.__layLibName)
        self.__inputDataLayout.addWidget(self.__layCellName)
        self.__inputDataLayout.addWidget(self.__layViewName)
        self.__inputDataLayout.addWidget(self.__selectLayout)
        self.__inputDataLayout.setContentsMargins(0, 0, 0, 0)
        self.setLayout(self.__inputDataLayout)

    def updateResultDir(self):
#        gui.updateCheckWidget()
#        print("dddddddddddddd")
#        print(self.parent.updateCheckWidget(),flush=True)
        self.updateCheckWidget()

    def getCellName(self):
        return (self.__layCellName.text())


class Inputdata(QGroupBox):
    def __init__(self,lay_lib_name,lay_cell_name,lay_view_name,main_window):
        QGroupBox.__init__(self, "Select Input Data")
        self.inputDataLayout1 = QVBoxLayout()
        self.inputDataLayout1.setContentsMargins(5, 5, 5, 5)
        self.__layout = InputdataOne("layout",lay_lib_name,lay_cell_name,lay_view_name,main_window)
        self.inputDataLayout1.addWidget(self.__layout, 0, Qt.AlignTop)
        self.__schematic = InputdataOne("schematic","tbd","tbd","tbd",main_window)
        self.inputDataLayout1.addWidget(self.__schematic, 0, Qt.AlignTop)

        #        print("a"*10)
        #        print(self.__layout.getCellName())
        #        print("b"*10)
        self.setLayout(self.inputDataLayout1)

    def getCellName(self):
        return (self.__layout.getCellName())


#        for widget in
#        print("------------- start new run")
#        print(self)
#        print(self.sender)
#        print(self.sender().isChecked)
#        print(self.sender().text())
#        print(self.__pvToolsTypesWidget[0].text())
#        print(self.__pvToolsTypesWidget[0].isChecked())
#        print(self.__pvCheckTypesWidget[0].text())
#        if self.__pvCheckTypesWidget[0].isChecked():
#            print("first one is checked")
#        print("--------------- end of new run")


class PVcommonOptions(QDialog):
    """common options for drc/lvs/perc"""

    def __init__(self, pvSourceSingle, pvCheckType, pvDest, inputData):
        QDialog.__init__(self)

        self.__inputData = inputData
        self.__username = getpass.getuser()
        self.__pvCheckType = pvCheckType
        self.__pvDest = pvDest
        self.__pvCellName = inputData.getCellName()
        self.__pvSourceSingle = pvSourceSingle
#        self.__coreAndResult = QWidget()
        self.__coreText = QLabel("core number")
        self.__coreNum = QComboBox()
        self.__coreNum.addItems(["4", "8", "16", "32", "64"])
        self.__openlavaText = QLabel("queue")
        self.__openlavaQueue = QComboBox()
        self.__openlavaQueue.addItems(["pv", "tapeout", "nobsub"])
        self.__resultText = QLabel(f"{pvCheckType} result path")
        self.__result = QLineEdit(f"{self.__pvDest}/{self.__username}/{self.__pvCheckType}/{self.__pvCellName}")
        self.__result.textChanged.connect(self.__updatePvResultPathCombobox)
        self.__coreAndResultLayout = QHBoxLayout()
        self.__coreAndResultLayout.addWidget((self.__coreText))
        self.__coreAndResultLayout.addWidget((self.__coreNum))
        self.__coreAndResultLayout.addWidget(self.__openlavaText)
        self.__coreAndResultLayout.addWidget(self.__openlavaQueue)
        self.__coreAndResultLayout.addWidget((self.__result))
#        self.__coreAndResult.setLayout(self.__coreAndResultLayout)

#        self.__ruledeckWidget = QWidget()
        self.__ruledeckLayout = QHBoxLayout()
        self.__ruledeckVersionText = QLabel("version")
        self.__ruledeckVersion = QComboBox()
        self.__ruledeckVersionList = next(os.walk(self.__pvSourceSingle))[1]
        if "latest" in self.__ruledeckVersionList:
            self.__ruledeckVersionList.remove("latest")
        self.__ruledeckVersionList.insert(0, "latest")
        self.__ruledeckVersion.addItems(self.__ruledeckVersionList)
        self.__ruledeckVersion.currentIndexChanged.connect(self.__updatePvSourcePath)
        self.__ruledeckPathText = QLabel("rule deck path")
        self.__ruledeckPath = QLineEdit(f"{self.__pvSourceSingle}/latest")
        self.__ruledeckPath.setReadOnly(True)
        self.__commentButton = QPushButton("add comments")
        self.__commentButton.setCheckable(True)
        self.__commentButton.setAutoDefault(False)
        self.__ruledeckLayout.addWidget(self.__ruledeckVersionText)
        self.__ruledeckLayout.addWidget(self.__ruledeckVersion)
        self.__ruledeckLayout.addWidget(self.__commentButton)
        self.__ruledeckLayout.addWidget(self.__ruledeckPathText)
        self.__ruledeckLayout.addWidget(self.__ruledeckPath)
#        self.__ruledeckWidget.setLayout(self.__ruledeckLayout)

        self.__textWidget = QWidget()
        self.__textLayout = QHBoxLayout()
        self.__textEdit = QPlainTextEdit()
        self.__textEdit.setPlaceholderText("run drc")
        self.__textLayout.addWidget(self.__textEdit)
        self.__textWidget.setLayout(self.__textLayout)

        self.__commentButton.toggled.connect(self.__textWidget.setVisible)

        self.__runWidget = QPushButton("run")
        self.__runWidget.clicked.connect(self.PressButton)
        self.__genWidget = QPushButton("gen")
        self.__openResultWidget = QPushButton("open result")
        self.__rveText = QLabel("result selection")
        self.__rveWidget = QComboBox()
#        self.__rveWidget.text

        self.__layout = QGridLayout()
        self.__layout.addWidget(self.__coreText, 0, 0)
        self.__layout.addWidget(self.__coreNum, 0, 1)
        self.__layout.addWidget(self.__openlavaText, 0, 2)
        self.__layout.addWidget(self.__openlavaQueue, 0, 3)
        self.__layout.addWidget(self.__resultText, 0, 4)
        self.__layout.addWidget(self.__result, 0, 5)
        self.__layout.addWidget(self.__ruledeckVersionText, 1, 0)
        self.__layout.addWidget(self.__ruledeckVersion, 1, 1)
        self.__layout.addWidget(self.__commentButton, 1, 2, 1, 2)
        self.__layout.addWidget(self.__ruledeckPathText, 1, 4)
        self.__layout.addWidget(self.__ruledeckPath, 1, 5)
        self.__layout.addWidget(self.__runWidget, 2, 0)
        self.__layout.addWidget(self.__genWidget, 2, 1)
        self.__layout.addWidget(self.__openResultWidget, 2, 3)
        self.__layout.addWidget(self.__rveText, 2, 4)
        self.__layout.addWidget(self.__rveWidget, 2, 5)
        self.__layout.setContentsMargins(5, 5, 0, 5)
        self.setLayout(self.__layout)

    def __updatePvSourcePath(self):
        version = self.__ruledeckVersion.currentText()
        self.__ruledeckPath.setText(f"{self.__pvSourceSingle}/{version}")

    def getPvSourcePath(self):
        return (self.__ruledeckPath.text())

    def updatePvResultPath(self, resultPath):
        self.__result.setText(f"{self.__pvDest}/{self.__username}/{self.__pvCheckType}/{resultPath}")

    def __updatePvResultPathCombobox(self):
        resultDirs = []
        path = self.__result.text().strip("/")
        temp = path.split("/")
        rootPath ="/" +  "/".join(temp[0 : -3])
        pvType = temp[-2]
        pvCell = temp[-1]
        print(rootPath)
        users = next(os.walk(rootPath))[1]
        for user in users:
            userDir = f"{rootPath}/{user}/{pvType}"
            if os.path.isdir(userDir):
                userResults =next(os.walk(userDir))[1]
                resultDirs = resultDirs + [f"{userDir}/{userResult}" for userResult in userResults if userResult.startswith(pvCell)]
        print(resultDirs)
        print(self.__result.text)
        if self.__result.text in resultDirs:
            resultDirs.remove(self.__result.text)
            resultDirs.insert(0,self.resultText)
        self.__rveWidget.clear()
        self.__rveWidget.addItems(resultDirs)

    def ruleDeckPath(self):
        return(self.__ruledeckPath)

    @Slot()
    def PressButton(self,inputData):
        cmd = f""
#        print(f'load("/home/study/aa")',file=sys.stderr,flush=True)
        print(f'oderun_load("/home/study/aa")',file=sys.stdout,flush=True)
        aa = self.__inputData.getCellName()
        print(f'{aa}')


class PVdrc(QGroupBox):
    global gui
    def __init__(self, pvSourceSingle, pvCheckType, pvDest, inputData):
        QGroupBox.__init__(self, f"{pvCheckType} setting")
        self.drcsetting = QVBoxLayout()
        #        self.drcsetting.setContentsMargins(0, 0, 0, 0)
        self.__commonWidget = PVcommonOptions(pvSourceSingle, pvCheckType, pvDest, inputData)
        self.drcsetting.addWidget(self.__commonWidget)

        self.drcmain = QVBoxLayout()
        self.drcmain.setContentsMargins(0, 0, 0, 0)
        self.drcmain.addLayout(self.drcsetting)

        # add select check
        self.__groups = self.__getGroupName(f"{self.__commonWidget.getPvSourcePath()}/group.rule")
        if self.__groups:
            self.drcmain.addWidget(CreateCheckboxListXrc("select check",self.__groups,[]))
        # end of add select check

#        self.__runLayout = QHBoxLayout()
#        self.__runWidget = QPushButton("run")
#        self.__runWidget.setMinimumSize(10,0)
#        self.__genWidget = QPushButton("gen")
#        self.__genWidget.setMinimumSize(10,0)
#        self.__runLayout.addWidget(self.__runWidget,0,Qt.AlignLeft)
#        self.__runLayout.addWidget(self.__genWidget,1,Qt.AlignLeft)
#        self.drcmain.addLayout(self.__runLayout)


        self.setLayout(self.drcmain)

    def updatePvResultPath(self, pvCellName):
        groups = self.__commonWidget.updatePvResultPath(pvCellName)

#    def __createGroupCheckTypes(self, groups):
#        self.__checkGroupWidget = []
#        self.__checkGroupLayout = QHBoxLayout()
#        self.__checkGroupLayout.setContentsMargins(5, 0, 5, 5)
#        self.__checkGroupLabel = QLabel("select check")
#        self.__checkGroupLayout.addWidget(self.__checkGroupLabel, 0, Qt.AlignLeft)
#        for group in groups:
#            self.__checkGroupWidget.append(QCheckBox(group, self))
#            self.__checkGroupLayout.addWidget(self.__checkGroupWidget[-1], 0, Qt.AlignLeft)
#        #        self.__checkGroupLayout.setContentsMargins(0,0,0,0)
#        self.drcmain.addLayout(self.__checkGroupLayout)

    @staticmethod
    def __getGroupName(groupfile):
        groups = []
        if os.path.isfile(groupfile):
            with open(groupfile, 'r') as f:
                for line in f:
                    groups.append(line.split()[1])
        return (groups)




class CreateCheckboxList(QHBoxLayout):
    def __init__(self,groups):
        QHBoxLayout.__init__(self)
        self.__checkGroupWidget = []
        self.setContentsMargins(5, 0, 5, 5)
        self.__checkGroupLabel = QLabel("select check")
        self.addWidget(self.__checkGroupLabel, 0, Qt.AlignLeft)
        for group in groups:
            self.__checkGroupWidget.append(QCheckBox(group))
            self.addWidget(self.__checkGroupWidget[-1], 0, Qt.AlignLeft)
        #        self.__checkGroupLayout.setContentsMargins(0,0,0,0)

class PVlvs(QGroupBox):
    def __init__(self, pvSourceSingle, pvCheckType, pvDest, pvCellName):
        QGroupBox.__init__(self, f"{pvCheckType} setting")
        self.lvssetting = QVBoxLayout()
        self.lvssetting.setContentsMargins(0, 0, 0, 0)
        self.__commonWidget = PVcommonOptions(pvSourceSingle, pvCheckType, pvDest, pvCellName)
        self.lvssetting.addWidget(self.__commonWidget)
        self.setLayout(self.lvssetting)

    def updatePvResultPath(self, pvCellName):
        self.__commonWidget.updatePvResultPath(pvCellName)


class PVxrc(QGroupBox):
    global gui

    def __init__(self, pvSourceSingle, pvCheckType, pvDest, pvCellName):
        QGroupBox.__init__(self, f"{pvCheckType} setting")
        self.xrcsetting = QVBoxLayout()
        self.xrcsetting.setContentsMargins(0, 0, 0, 0)
        self.__commonWidget = PVcommonOptions(pvSourceSingle, pvCheckType, pvDest, pvCellName)
        self.xrcsetting.addWidget(self.__commonWidget)
        self.setLayout(self.xrcsetting)

        self.__accuracyLayout = QHBoxLayout()
        self.__accuracyLayout.setAlignment(Qt.AlignLeft)
        self.__accuracyText = QLabel("accuracy")
        self.__accuracyCombo = QComboBox()
#        self.__accuracyCombo.setFixedWidth(100)
        if os.path.isdir(f"{pvSourceSingle}/latest/accuracy"):
            self.__accuracyFile= next(os.walk(f"{pvSourceSingle}/latest/accuracy"))[2]
            print(self.__accuracyFile)
            self.__accuracyCombo.addItems(self.__accuracyFile)
        self.__hcellText = QLabel("hcell")
        self.__hcellCombo = QComboBox()
        self.__hcellCombo.addItems(["auto"])
        self.__gateText = QLabel("gate cell")
        self.__gateCombo = QComboBox()
        self.__gateCombo.addItems(["nogate"])
#        self.__accuracyLayout.addWidget(self.__accuracyText)
#        self.__accuracyLayout.addSpacing(10)
        self.__accuracyLayout.addWidget(self.__accuracyText)
        self.__accuracyLayout.addWidget(self.__accuracyCombo)
        self.__accuracyLayout.addWidget(self.__hcellText)
        self.__accuracyLayout.addWidget(self.__hcellCombo)
        self.__accuracyLayout.addWidget(self.__gateText)
        self.__accuracyLayout.addWidget(self.__gateCombo)
#        self.__accuracyLayout.addWidget(self.__accuracyCombo)
        self.xrcsetting.addLayout(self.__accuracyLayout)

        # add xrc corner
#        self.__groups = self.__getCornerName(f"{self.__commonWidget.getPvSourcePath()}/smc_config")
        self.__xrcCornerJson = f"{self.__commonWidget.getPvSourcePath()}/smc.json"
        if os.path.isfile(self.__xrcCornerJson):
            with open(self.__xrcCornerJson) as f:
                self.xrcjson = json.load(f)
                self.xrcCorners = self.xrcjson["corners"].keys()
                self.defaultCorners = self.xrcjson["default_corners"]
                self.xrcsetting.addWidget(CreateCheckboxListXrc("corners",self.xrcCorners,self.defaultCorners))
#                self.__groups = json.load(f)["corners"].keys()
#        print(self.__groups)
#        if self.__groups:
#            self.xrcsetting.addWidget(CreateCheckboxListXrc(self.__groups))
        # end of add xrc corner

    def updatePvResultPath(self, pvCellName):
        self.__commonWidget.updatePvResultPath(pvCellName)

    def ruleDeckPath(self):
        self.ruleDeckPath()

    @staticmethod
    def __getCornerName(groupfile):
        groups = []
        if os.path.isfile(groupfile):
            with open(groupfile, 'r') as f:
                for line in f:
                    line = line.replace(":"," ")
                    if line.startswith("CORNER_NAME"):
                        groups.append(line.split()[1])
        return (groups)

class CreateCheckboxListXrc(QGroupBox):
    def __init__(self,groupName,groups,defaultGroup):
        QGroupBox.__init__(self,groupName)
        self.__GroupWidget = {}
        self.__layout = QGridLayout()
        self.setContentsMargins(0, 20, 0, 0)
        for num,group in enumerate(groups):
            x = int(num/8)
            y = num%8
            self.__GroupWidget[group]=QCheckBox(group)
            if group in defaultGroup:
                self.__GroupWidget[group].setChecked(True)
            self.__layout.addWidget(self.__GroupWidget[group],x,y,alignment=Qt.AlignLeft)
        self.setLayout(self.__layout)
        #        self.__checkGroupLayout.setContentsMargins(0,0,0,0)

class PVperc(QGroupBox):
    def __init__(self, pvSourceSingle, pvCheckType, pvDest, pvCellName):
        QGroupBox.__init__(self, f"{pvCheckType} setting")
        self.percsetting = QVBoxLayout()
        self.percsetting.setContentsMargins(0, 0, 0, 0)
        self.__commonWidget = PVcommonOptions(pvSourceSingle, pvCheckType, pvDest, pvCellName)
        self.percsetting.addWidget(self.__commonWidget)
        self.setLayout(self.percsetting)

    def updatePvResultPath(self, pvCellName):
        self.__commonWidget.updatePvResultPath(pvCellName)


#app = QApplication(sys.argv)
#pvSource = "/home/study/foundry/process/metaloption/"
#pvDest = "/home/study/pvresults"
#gui = Pvgui(pvSource, pvDest)
#app.exec_()
